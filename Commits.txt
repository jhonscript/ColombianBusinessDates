# Plan de Commits y Verificación

Este documento describe la estrategia de commits para el desarrollo progresivo del proyecto. Cada commit representa un bloque de funcionalidad completo y debe pasar su correspondiente paso de verificación antes de ser añadido al historial de Git.

---

### Commit 1: `feat: initial project setup and configuration`

- **Descripción:** Configura el proyecto Node.js con TypeScript, instala todas las dependencias de producción y desarrollo, crea la estructura de carpetas y establece la configuración de `tsconfig.json`. Corresponde a la **Fase 1** del Plan.txt.
- **Paso de Verificación (Quality Gate):** El proyecto debe compilar sin errores.
    - **Comando:** `npx tsc`
    - **Resultado Esperado:** El comando se ejecuta y no muestra ningún error.

---

### Commit 2: `feat: define core domain interfaces and errors`

- **Descripción:** Crea las interfaces del dominio (`IHolidayProvider`, `IDateCalculator`) y los errores de negocio personalizados. Corresponde a la **Fase 2** del Plan.txt.
- **Paso de Verificación (Quality Gate):** El código del dominio debe compilar sin errores.
    - **Comando:** `npx tsc`
    - **Resultado Esperado:** El comando se ejecuta y no muestra ningún error.

---

### Commit 3: `feat: implement business logic services`

- **Descripción:** Implementa la lógica de negocio principal en `HolidayApiProvider` y `DateCalculator.service`. También incluye la creación de las **pruebas unitarias** para verificar esta lógica. Corresponde a la **Fase 3** y parte de la **Fase 5**.
- **Paso de Verificación (Quality Gate):** Todas las pruebas unitarias de la lógica de negocio deben pasar.
    - **Comando:** `npm test` (o el comando de test que configuremos).
    - **Resultado Esperado:** Todos los tests se ejecutan y pasan exitosamente.

---

### Commit 4: `feat: build API layer with validation and routing`

- **Descripción:** Expone la lógica de negocio a través de un endpoint HTTP. Incluye el esquema de validación con Zod, el controlador, las rutas y la configuración de `App.ts`. También incluye las **pruebas de integración**. Corresponde a la **Fase 4** y parte de la **Fase 5**.
- **Paso de Verificación (Quality Gate):** El servidor debe arrancar y todas las pruebas (unitarias y de integración) deben pasar.
    - **Comando:** `npm test`
    - **Resultado Esperado:** Todos los tests pasan. Adicionalmente, podemos arrancar el servidor con `npm start` y hacer una petición manual con `curl` para una doble verificación.

---

### Commit 5: `docs: create final documentation and build artifacts`

- **Descripción:** Genera los archivos finales para la entrega: `README.md` detallado, `Dockerfile` para producción y `.env.example`. Corresponde a la **Fase 6** del Plan.txt.
- **Paso de Verificación (Quality Gate):** La imagen de Docker debe poder construirse correctamente (si Docker está disponible).
    - **Comando:** `docker build .`
    - **Resultado Esperado:** La imagen de Docker se construye sin errores.
